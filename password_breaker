import PyPDF2

def brute_force_pdf_password(pdf_file, dictionary_file):
    # Otwórz plik PDF
    with open(pdf_file, 'rb') as file:
        pdf_reader = PyPDF2.PdfFileReader(file)

        # Sprawdź, czy PDF jest zaszyfrowany
        if not pdf_reader.isEncrypted:
            print("Plik PDF nie jest zaszyfrowany.")
            return
        
        # Wczytaj plik słownikowy
        with open(dictionary_file, 'r') as dict_file:
            words = dict_file.readlines()

        # Próbuj każdą kombinację słów
        for word in words:
            word = word.strip()
            # Sprawdź małe litery
            if pdf_reader.decrypt(word) == 1:
                print(f"Hasło znalezione: {word}")
                return
            # Sprawdź wielkie litery
            elif pdf_reader.decrypt(word.lower()) == 1:
                print(f"Hasło znalezione: {word.lower()}")
                return
            elif pdf_reader.decrypt(word.upper()) == 1:
                print(f"Hasło znalezione: {word.upper()}")
                return
        
        # Jeśli nie znaleziono hasła
        print("Nie znaleziono hasła.")

# Przykład użycia
pdf_file = 'zaszyfrowany_plik.pdf'  # Zastąp swoją ścieżką do pliku PDF
dictionary_file = 'dictionary.txt'  # Zastąp swoją ścieżką do pliku słownikowego
brute_force_pdf_password(pdf_file, dictionary_file)



#Wyjaśnienie kodu
#Importowanie PyPDF2: Na początku importujemy moduł PyPDF2, który umożliwia pracę z plikami PDF w Pythonie.

#Funkcja brute_force_pdf_password:

#Przyjmuje dwa argumenty: pdf_file (nazwa zaszyfrowanego pliku PDF) oraz dictionary_file (plik słownikowy zawierający angielskie słowa).
#Otwiera plik PDF za pomocą PdfFileReader, a następnie sprawdza, czy plik jest zaszyfrowany (pdf_reader.isEncrypted).
#Wczytywanie słownika:

#Plik słownikowy jest wczytywany i każda linia (słowo) jest przechowywana w liście words.
#Sprawdzanie hasła:

#Program iteruje przez każde słowo w liście words, próbując odszyfrować plik PDF zarówno przy użyciu małych, jak i wielkich liter.
#Jeśli pdf_reader.decrypt(word) zwróci 1, oznacza to, że hasło zostało poprawnie odgadnięte, i program wyświetli to hasło.
#Koniec programu:

#Jeśli wszystkie słowa z listy zostaną wypróbowane i żadne nie zadziała, program informuje użytkownika, że nie znaleziono hasła.
